@page "/testing"
@rendermode InteractiveServer
@using MicroBoxer.Web.Extensions
@using MicroBoxer.Web.Services
@using MicroBoxer.Web.Services.ViewModel
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@inject BoxesService boxesService
@inject BoxesNotificationService boxesNotificationService


<div class="container">
<PageTitle>Testing</PageTitle>
    <p>@BoxList.Count</p>
    <div class="box-and-contents-container">
        @foreach (var box in BoxList)
        {
            <MicroBoxer.Web.Components.Box.BoxComponent Box="@box" />
        }
    </div>




    <button @onclick="GenerateData">Generate Data Request</button>
<MicroBoxer.Web.Components.User.BoxesRefreshOnChange RefreshRequest="RefreshBoxes" />
</div>

@code {
    public string BoxContentName { get; set; } = "";
    public string BoxContentDescription { get; set; } = "";
    public string BoxId { get; set; } = "";
    private IDisposable? boxesChangedSubscription;
    public string BoxName { get; set; }
    public List<Box> BoxList = new List<Box>();
    public List<BoxRecord> boxes { get; set; } = new List<BoxRecord>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public async Task SendDeleteBoxRequest(Guid boxId)
    {
        try
        {

            var request = new DeleteBoxRequest(boxId.ToString(),true);
            var result = await boxesService.DeleteBox(request,Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    public async Task SendUpdateBoxRequest(Guid boxId, string boxName, IEnumerable<BoxContent> boxContents )
    {
        try
        {
            var request = new UpdateBoxRequest(boxId.ToString(), boxName, boxContents);
            var result = await boxesService.UpdateBox(request,Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    public async Task SendDeleteBoxContentRequest(Guid contentId)
    {
        try
        {
            var request = new DeleteBoxContentRequest(contentId.ToString());
            var result = await boxesService.DeleteBoxContent(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    public async Task SendUpdateBoxContentRequest(Guid? boxId, string name, string description, Guid? id)
    {
        try
        {
            var request = new UpdateBoxContentRequest(boxId.ToString(), name, description, id.ToString());
            var result = await boxesService.UpdateBoxContent(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public async Task SendCreateBoxRequest()
    {
        try
        {
            var request = new CreateBoxRequest(Guid.NewGuid().ToString(), BoxName, new List<BoxContentRecord>());
            var result = await boxesService.CreateBox(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    public async Task SendCreateBoxContentRequest()
    {
        try
        {
            BoxId = BoxId == String.Empty ? null : BoxId;

            var request = new CreateBoxContentRequest(BoxId, BoxContentName, BoxContentDescription);
            var result = await boxesService.CreateBoxContent(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    protected async override Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
        /*if (BoxList.Count == 0)
        {
            await AddFirstBox();
        }

        if (BoxList.Count == 1 && BoxList.FirstOrDefault().BoxContents.Count == 0)
        {
            await AddFirstContent(boxes.FirstOrDefault().Id);
        }*/
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userId = "1";
            if (!string.IsNullOrEmpty(userId))
            {
                boxesChangedSubscription = boxesNotificationService.SubscribeToBoxesChangesNotifications(
                userId, () => InvokeAsync(RefreshBoxes));
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {

        await GetAllBoxes();

        //return base.OnInitializedAsync();
    }
    private async Task RefreshBoxes()
    {
        //await GetAllBoxes();
    }


    public async Task GetAllBoxes()
    {
        var result = await boxesService.GetBoxes();
        boxes = result.ToList();
        foreach (var box in boxes)
        {
            BoxList.Add(await box.FromRecord());
        }
    }

    public async Task AddFirstBox()
    {
        try
        {
            BoxName = "First Dummy Box";
            var request = new CreateBoxRequest(Guid.NewGuid().ToString(), BoxName, new List<BoxContentRecord>());
            var result = await boxesService.CreateBox(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
    public async Task AddFirstContent(string boxId)
    {
        try
        {

            var request = new CreateBoxContentRequest(boxId, BoxContentName, BoxContentDescription);
            var result = await boxesService.CreateBoxContent(request, Guid.NewGuid());
            Console.WriteLine(result);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    public async Task AddBox()
    {


    }
    public async Task GenerateData()
    {
        await boxesService.GenerateBoxes(2, 0);
    }

}