@rendermode InteractiveServer
@implements IDisposable
@using MicroBoxer.Web.Components.Common.Dialogs
@using MicroBoxer.Web.Services
@using MicroBoxer.Web.Services.ViewModel
@inject BoxesService boxesService
@inject UserBoxesState userBoxesState
@page "/testing/boxcontent"
@inject NavigationManager Nav

<div class="row box">

    <div class="col">
        <div class="card shadow-sm">
            <svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>@BoxContent.Name</title><rect width="100%" height="100%" fill="#55595c" /><text x="50%" y="50%" fill="#eceeef" dy=".3em">@BoxContent.Name</text></svg>
            <div class="card-body">
                <p class="card-text">@BoxContentDesc</p>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        @*<button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ShowEditDialog">Edit Content</button>*@
                        <OptionsHeaderContent actionResult="MenuActionHandler" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<MicroBoxer.Web.Components.Common.Dialogs.EditBoxContentDialog @ref="editDialog" BoxContent="BoxContent"
onConfirm="(args) => EditBoxContentCallback(args.Item1, args.Item2)" />


<MicroBoxer.Web.Components.Common.Dialogs.ConfirmDialog Id="@BoxContent.BoxId.ToString()" @ref="confirmDialog" onConfirm="ConfirmDialogHandler" />


@code {
    public bool EditMode { get; set; } = true;
    [Parameter]
    public BoxContent BoxContent { get; set; }
    public string BoxContentDesc => BoxContent.Name + "||\n" + BoxContent.Description + "||\n" + BoxContent.Id;
    private EditBoxContentDialog editDialog;
    private ConfirmDialog confirmDialog;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    public static string Url(NavigationManager nav)
        => $"/testing/boxcontent?returnUrl={Uri.EscapeDataString(nav.ToBaseRelativePath(nav.Uri))}";

    public void Dispose()
    {
    }

    public async Task SendUpdateBoxContentRequest(Guid? boxId, string name, string description, Guid? id)
    {
        try
        {
            var result = await userBoxesState.UpdateBoxContentAsync(boxId, name, description, id);

        }
        catch (Exception ex)
        {

        }
    }
    public async Task SendDeleteBoxContentRequest(Guid id)
    {
        try
        {
            var result = await userBoxesState.DeleteBoxContentAsync(id);

        }
        catch (Exception ex)
        {

        }
    }
    public async Task ShowEditDialog()
    {
        editDialog.Show();
    }
    public async Task ShowConfirmDialog()
    {
        confirmDialog.Show();
    }
    public async Task EditBoxContentCallback(bool action, BoxContent boxContent)
    {
        if (!action)
        {
            return;
        }
        else
        {
            await SendUpdateBoxContentRequest(boxContent.BoxId, boxContent.Name, boxContent.Description, boxContent.Id);
        }
    }
    public async Task ConfirmDialogHandler(bool action)
    {
        if (action)
        {
            await SendDeleteBoxContentRequest(BoxContent.Id);
            this.Dispose();
        }
    }
    public async Task MenuActionHandler(string action)
    {
        switch(action)
        {
            case "ReturnClicked":
                Nav.NavigateTo(ReturnUrl);
                break;
            case "EditClicked":
                await ShowEditDialog();
                break;
            case "DeleteClicked":
                await ShowConfirmDialog();
                break;
            case "ScanClicked":
                break;
        }


    }
}
