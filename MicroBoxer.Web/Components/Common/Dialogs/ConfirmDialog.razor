
<Dialog @ref="dialog" Id="@Id">
    <div class="modal modal-sheet position-static d-block bg-body-secondary p-4 py-md-5" tabindex="-1" role="dialog" id="modalSheet">
        <div class="modal-dialog" role="document">
            <div class="modal-content rounded-4 shadow">
                <div class="modal-header border-bottom-0">
                    <h1 class="modal-title fs-5">Modal title</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body py-0">
                    <p>This is a modal sheet, a variation of the modal that docs itself to the bottom of the viewport like the newer share sheets in iOS.</p>
                </div>
                <div class="modal-footer flex-column align-items-stretch w-100 gap-2 pb-3 border-top-0">
                    <button type="button" class="btn btn-lg btn-primary" @onclick="() => Confirm(true)">Save changes</button>
                    <button type="button" class="btn btn-lg btn-secondary" data-bs-dismiss="modal" @onclick="() => Confirm(false)">Close</button>
                </div>
            </div>
        </div>
    </div>
</Dialog>


@code {
    private Dialog dialog;
    [Parameter]
    public EventCallback<bool> onConfirm { get; set; }
    [Parameter]
    public string Id { get; set; }
    private async Task Confirm(bool action)
    {
        await onConfirm.InvokeAsync(action);
        await dialog.CloseDialogAsync();
    }

    private async Task Dispose()
    {
        await dialog.CloseDialogAsync();
        await dialog.DisposeAsync();
    }

    public async Task Show()
    {
        await dialog.ShowDialogAsync();
        StateHasChanged();
    }
    public async Task Close()
    {
        await dialog.CloseDialogAsync();
        StateHasChanged();
    }
}
