@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication.OpenIdConnect;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using WebApp.Services
@inject LogOutService LogOutService
@inject NavigationManager Nav

<div class="user-menu">
<AuthorizeView>
    <Authorized>
        <h3 class="h3">@context.User.Identity?.Name</h3>
        <div class="dropdown-menu">
            <span class="dropdown-button"><img role="presentation" src="icons/user.svg" class="user-icon" /></span>
            <div class="dropdown-content" data-bs-theme="dark">
                <a class="dropdown-item" href="/user/boxes">My Boxes</a>
                <form class="dropdown-item" method="post" action="user/logout" @formname="logout" @onsubmit="LogOutAsync">
                    <AntiforgeryToken />
                    <button type="submit">Log out</button>
                </form>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
            <a aria-label="Sign in" href="@Pages.User.LogIn.Url(Nav)"><img role="presentation" src="icons/user.svg" class="user-icon" /></a>
    </NotAuthorized>
</AuthorizeView>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private Task LogOutAsync()
        => LogOutService.LogOutAsync(HttpContext!);

    /*protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        Nav.NavigateTo(Pages.User.LogIn.Url(Nav));
    }*/
}
